package com.emiadda.server;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 8/3/2016 5:50:27 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class ProductsParams implements KvmSerializable {
    
    public String product_id;
    public String thumb;
    public String name;
    public String model;
    public String quantity;
    public String subtract;
    public String commission;
    public String vendor_id;
    public String vendor_total;
    public String store_tax;
    public String vendor_tax;
    public String shipping_value_type;
    public String shipping_charge;
    public String mrp;
    public String price;
    public String down_payment;
    public String product_shipping;
    public String total;
    public String tax;
    public String reward;
    
    public ProductsParams(){}
    
    public ProductsParams(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("product_id"))
        {
            Object obj = soapObject.getProperty("product_id");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                product_id = j.toString();
            }else if (obj!= null && obj instanceof String){
                product_id = (String) obj;
            }
        }
        if (soapObject.hasProperty("thumb"))
        {
            Object obj = soapObject.getProperty("thumb");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                thumb = j.toString();
            }else if (obj!= null && obj instanceof String){
                thumb = (String) obj;
            }
        }
        if (soapObject.hasProperty("name"))
        {
            Object obj = soapObject.getProperty("name");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                name = j.toString();
            }else if (obj!= null && obj instanceof String){
                name = (String) obj;
            }
        }
        if (soapObject.hasProperty("model"))
        {
            Object obj = soapObject.getProperty("model");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                model = j.toString();
            }else if (obj!= null && obj instanceof String){
                model = (String) obj;
            }
        }
        if (soapObject.hasProperty("quantity"))
        {
            Object obj = soapObject.getProperty("quantity");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                quantity = j.toString();
            }else if (obj!= null && obj instanceof String){
                quantity = (String) obj;
            }
        }
        if (soapObject.hasProperty("subtract"))
        {
            Object obj = soapObject.getProperty("subtract");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                subtract = j.toString();
            }else if (obj!= null && obj instanceof String){
                subtract = (String) obj;
            }
        }
        if (soapObject.hasProperty("commission"))
        {
            Object obj = soapObject.getProperty("commission");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                commission = j.toString();
            }else if (obj!= null && obj instanceof String){
                commission = (String) obj;
            }
        }
        if (soapObject.hasProperty("vendor_id"))
        {
            Object obj = soapObject.getProperty("vendor_id");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                vendor_id = j.toString();
            }else if (obj!= null && obj instanceof String){
                vendor_id = (String) obj;
            }
        }
        if (soapObject.hasProperty("vendor_total"))
        {
            Object obj = soapObject.getProperty("vendor_total");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                vendor_total = j.toString();
            }else if (obj!= null && obj instanceof String){
                vendor_total = (String) obj;
            }
        }
        if (soapObject.hasProperty("store_tax"))
        {
            Object obj = soapObject.getProperty("store_tax");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                store_tax = j.toString();
            }else if (obj!= null && obj instanceof String){
                store_tax = (String) obj;
            }
        }
        if (soapObject.hasProperty("vendor_tax"))
        {
            Object obj = soapObject.getProperty("vendor_tax");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                vendor_tax = j.toString();
            }else if (obj!= null && obj instanceof String){
                vendor_tax = (String) obj;
            }
        }
        if (soapObject.hasProperty("shipping_value_type"))
        {
            Object obj = soapObject.getProperty("shipping_value_type");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                shipping_value_type = j.toString();
            }else if (obj!= null && obj instanceof String){
                shipping_value_type = (String) obj;
            }
        }
        if (soapObject.hasProperty("shipping_charge"))
        {
            Object obj = soapObject.getProperty("shipping_charge");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                shipping_charge = j.toString();
            }else if (obj!= null && obj instanceof String){
                shipping_charge = (String) obj;
            }
        }
        if (soapObject.hasProperty("mrp"))
        {
            Object obj = soapObject.getProperty("mrp");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                mrp = j.toString();
            }else if (obj!= null && obj instanceof String){
                mrp = (String) obj;
            }
        }
        if (soapObject.hasProperty("price"))
        {
            Object obj = soapObject.getProperty("price");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                price = j.toString();
            }else if (obj!= null && obj instanceof String){
                price = (String) obj;
            }
        }
        if (soapObject.hasProperty("down_payment"))
        {
            Object obj = soapObject.getProperty("down_payment");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                down_payment = j.toString();
            }else if (obj!= null && obj instanceof String){
                down_payment = (String) obj;
            }
        }
        if (soapObject.hasProperty("product_shipping"))
        {
            Object obj = soapObject.getProperty("product_shipping");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                product_shipping = j.toString();
            }else if (obj!= null && obj instanceof String){
                product_shipping = (String) obj;
            }
        }
        if (soapObject.hasProperty("total"))
        {
            Object obj = soapObject.getProperty("total");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                total = j.toString();
            }else if (obj!= null && obj instanceof String){
                total = (String) obj;
            }
        }
        if (soapObject.hasProperty("tax"))
        {
            Object obj = soapObject.getProperty("tax");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                tax = j.toString();
            }else if (obj!= null && obj instanceof String){
                tax = (String) obj;
            }
        }
        if (soapObject.hasProperty("reward"))
        {
            Object obj = soapObject.getProperty("reward");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                reward = j.toString();
            }else if (obj!= null && obj instanceof String){
                reward = (String) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return product_id;
            case 1:
                return thumb;
            case 2:
                return name;
            case 3:
                return model;
            case 4:
                return quantity;
            case 5:
                return subtract;
            case 6:
                return commission;
            case 7:
                return vendor_id;
            case 8:
                return vendor_total;
            case 9:
                return store_tax;
            case 10:
                return vendor_tax;
            case 11:
                return shipping_value_type;
            case 12:
                return shipping_charge;
            case 13:
                return mrp;
            case 14:
                return price;
            case 15:
                return down_payment;
            case 16:
                return product_shipping;
            case 17:
                return total;
            case 18:
                return tax;
            case 19:
                return reward;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 20;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "product_id";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "thumb";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "name";
                break;
            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "model";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "quantity";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "subtract";
                break;
            case 6:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "commission";
                break;
            case 7:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "vendor_id";
                break;
            case 8:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "vendor_total";
                break;
            case 9:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "store_tax";
                break;
            case 10:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "vendor_tax";
                break;
            case 11:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "shipping_value_type";
                break;
            case 12:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "shipping_charge";
                break;
            case 13:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "mrp";
                break;
            case 14:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "price";
                break;
            case 15:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "down_payment";
                break;
            case 16:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "product_shipping";
                break;
            case 17:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "total";
                break;
            case 18:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "tax";
                break;
            case 19:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "reward";
                break;
        }
    }
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
